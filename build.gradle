apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'


group = 'net.spantree.namegenius'
version = '1.0.11'
artifact = 'name-genius'

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'


    testCompile 'ch.qos.logback:logback-classic:1.0.13'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) { // (1)
    classifier = 'javadoc'
    from javadoc.destinationDir
}

ext {
    pomFilePath = "${project.projectDir}/tmp/pom.xml"
    pomFile = file(pomFilePath)
}


configurations {
    pom
}
artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
    if (pomFile.exists()) {
        pom pomFile
    }
}

task signPom(type: Sign) {
    sign configurations.pom
}

task signJars(type: Sign, dependsOn: [jar, javadocJar, sourceJar]) {
    sign configurations.archives
}

if (project.ext.pomFile.exists()) {
    task preparePublication(dependsOn: [signJars, signPom])
} else {
    task preparePublication(dependsOn: signJars)
}

def getSignatureFiles = {
    def allFiles = project.tasks.signJars.signatureFiles.collect { it }
    def signedSources = allFiles.find { it.name.contains('-sources') }
    def signedJavadoc = allFiles.find { it.name.contains('-javadoc') }
    def signedJar = (allFiles - [signedSources, signedJavadoc])[0]
    return [
            [archive: signedSources, classifier: 'sources', extension: 'jar.asc'],
            [archive: signedJavadoc, classifier: 'javadoc', extension: 'jar.asc'],
            [archive: signedJar, classifier: null, extension: 'jar.asc']
    ]
}

def getPomSignature = {
    return project.tasks.signPom.signatureFiles.collect { it }[0]
}

publishing {
    publications {
        gpgJars(MavenPublication) {
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Name Genius'
                    description 'Randomly generated users'
                    url 'https://github.com/Spantree/name-genius'
                    scm {
                        url 'https://github.com/Spantree/name-genius'
                        connection 'scm:git:ssh:git@github.com:/Spantree/name-genius'
                        developerConnection 'scm:git:ssh:git@github.com:/Spantree/name-genius'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'surrealanalysis'
                            name 'Kevin Greene'
                            email 'kevin@spantree.net'
                        }
                        developer {
                            id 'divideby0'
                            name 'Cedric Hurst'
                            email 'cedric@spantree.net'
                        }

                    }
                }
            }

            getSignatureFiles().each { signature ->
                artifact(signature.archive) {
                    classifier = signature.classifier
                    extension = signature.extension
                }
            }
        }
        if (project.ext.pomFile.exists()) {
            gpgPom(MavenPublication) {
                artifact(getPomSignature()) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
        }


        signatures(MavenPublication) {
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Name Genius'
                    description 'Randomly generated users'
                    url 'https://github.com/Spantree/name-genius'
                    scm {
                        url 'https://github.com/Spantree/name-genius'
                        connection 'scm:git:ssh:git@github.com:/Spantree/name-genius'
                        developerConnection 'scm:git:ssh:git@github.com:/Spantree/name-genius'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'surrealanalysis'
                            name 'Kevin Greene'
                            email 'kevin@spantree.net'
                        }
                        developer {
                            id 'divideby0'
                            name 'Cedric Hurst'
                            email 'cedric@spantree.net'
                        }

                    }
                }
            }

            // give signature files to rtifact method
            getSignatureFiles().each { signature ->
                artifact(signature.archive) {
                    classifier = signature.classifier
                    extension = signature.extension
                }
            }
        }

        jar(MavenPublication) {
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Name Genius'
                    description 'Randomly generated users'
                    url 'https://github.com/Spantree/name-genius'
                    scm {
                        url 'https://github.com/Spantree/name-genius'
                        connection 'scm:git:ssh:git@github.com:/Spantree/name-genius'
                        developerConnection 'scm:git:ssh:git@github.com:/Spantree/name-genius'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'surrealanalysis'
                            name 'Kevin Greene'
                            email 'kevin@spantree.net'
                        }
                        developer {
                            id 'divideby0'
                            name 'Cedric Hurst'
                            email 'cedric@spantree.net'
                        }

                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (project.ext.pomFile.exists()) {


                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }

            } else {
                url "build/libs"
            }
        }
    }
}

